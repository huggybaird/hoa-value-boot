package com.hoavalue.data;
 
import java.io.File;
import java.util.ArrayList;
import java.util.List;

import javax.annotation.PostConstruct;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import com.fasterxml.jackson.databind.MappingIterator;
import com.fasterxml.jackson.dataformat.csv.CsvMapper;
import com.fasterxml.jackson.dataformat.csv.CsvSchema;
 

//import com.opencsv.CSVReader;
//@RestController
@Controller
public class ImportCsv
{
	@Autowired // This means to get the bean called userRepository// Which is auto-generated by Spring, we will use it to handle the data
	private PropertyRedfinRepository propertyRedfinRepository;

//    public static void main(String[] args)
//    {
//            readCsv();
//            readCsvUsingLoad();
//    }
	/**
	 * Reads PropertyRedfin objects from a CSV file 
	 * @throws Exception 
	 */ 
	 @PostConstruct
	    private void init() throws Exception {
	        System.out.println("AppInitializator initialization logic ...");
	        //loadFromCsvFile("D:/dev/hoa-data/redfin/Redfin-listings-with-hoa-fee-left.csv");
	        // ...
	    }
	 
	public void loadFromCsvFile(String csvFileName) throws Exception {
//		
			File csvFile = new File(csvFileName); //new File("D:/dev/hoa-data/redfin/Redfin-listings-with-hoa-fee.csv");
		 
			CsvMapper mapper = new CsvMapper();

	      CsvSchema sclema = mapper.schemaFor(PropertyRedfin.class)
	          .withSkipFirstDataRow(true)
	          .withColumnSeparator(',').withoutQuoteChar();
	      
		      MappingIterator<PropertyRedfin> redfinIter = mapper
		          .readerWithTypedSchemaFor(PropertyRedfin.class)
		          .with(sclema).readValues(csvFile);

		     // List<XX> hotelSummaries = redfinIter.readAll();
			
			//MappingIterator<PropertyRedfin> redfinIter = new CsvMapper().readerWithTypedSchemaFor(PropertyRedfin.class).readValues(csvFile);
			 
			 int row = 0;
			 List<PropertyRedfin> list = new ArrayList<PropertyRedfin> ();  
			 boolean running = true;
			 
			while (true) {
				try
		        {
			        if (!redfinIter.hasNextValue())
			            { break; }
		        }
			    catch (Exception e)
			    {
			    	System.out.println("###################################################################################################################");
					System.out.println("###################################################################################################################");
					System.out.println("###################################################################################################################");
					System.out.println("ERROR hasNext ROW:"+String.valueOf(row)+" - "+e.getMessage());
					System.out.println("###################################################################################################################");
					System.out.println("###################################################################################################################");
					System.out.println("###################################################################################################################");
					e.printStackTrace();
			        continue;
		        }
				
				try{
			
					row++;
					PropertyRedfin myProperty = redfinIter.next();
					list.add(myProperty);
					System.out.println("Property: "+myProperty.getAddress1());
					if(row % 20 == 0) {
						System.out.println("DONE!!! ["+String.valueOf(row)+": "+myProperty.getAddress1());
						propertyRedfinRepository.saveAll(list);
						list.clear();
					}
					//propertyRedfinRepository.save(myProperty);
					//System.out.println("DONE!!! ["+String.valueOf(row)+": "+myProperty.getAddress1());
				} catch (Exception e)
				 {
					System.out.println("###################################################################################################################");
					System.out.println("###################################################################################################################");
					System.out.println("###################################################################################################################");
					System.out.println("ERROR ON ROW:"+String.valueOf(row)+" - "+e.getMessage());
					System.out.println("###################################################################################################################");
					System.out.println("###################################################################################################################");
					System.out.println("###################################################################################################################");
					e.printStackTrace();
				 }
			}
		
	 
	}
	
	
//    private static void readCsv()
//    {
// 
//        try (
//        		CSVReader reader = new CSVReader(new FileReader("upload.csv"), ','); 
//                     //Connection connection = DBConnection.getConnection();
//        		)
//        {
//                //String insertQuery = "Insert into txn_tbl (txn_id,txn_amount, card_number, terminal_id) values (null,?,?,?)";
//                //PreparedStatement pstmt = connection.prepareStatement(insertQuery);
//                String[] rowData = null;
//                int i = 0;
//                while((rowData = reader.readNext()) != null)
//                {
//                	PropertyRedfin n = new PropertyRedfin();
//					n.setName(name);
//					n.setEmail(email);
//					userRepository.save(n);
//					return "Saved";
//             		
//                    System.out.println("Data Successfully Uploaded");
//                     
//                    for (String data : rowData)
//                    {
//
//                       
////                            pstmt.setString((i % 3) + 1, data);
//// 
////                            if (++i % 3 == 0)
////                                    pstmt.addBatch();// add batch
//// 
////                            if (i % 30 == 0)// insert when the batch size is 10
////                                    pstmt.executeBatch();
//                    }
//                }
//        }
//        catch (Exception e)
//        {
//                e.printStackTrace();
//        }
// 
//    }
 
    private static void readCsvUsingLoad()
    {
//        try (Connection connection = DBConnection.getConnection())
//        {
// 
//                String loadQuery = "LOAD DATA LOCAL INFILE '" + "C:\\upload.csv" + "' INTO TABLE txn_tbl FIELDS TERMINATED BY ','" + " LINES TERMINATED BY '\n' (txn_amount, card_number, terminal_id) ";
//                System.out.println(loadQuery);
//                Statement stmt = connection.createStatement();
//                stmt.execute(loadQuery);
//        }
//        catch (Exception e)
//        {
//                e.printStackTrace();
//        }
    }
 
}