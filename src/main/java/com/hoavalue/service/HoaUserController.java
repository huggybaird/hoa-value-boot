package com.hoavalue.service;

import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import com.hoavalue.data.UserRepository;

import io.swagger.v3.oas.annotations.tags.Tag;

//import io.swagger.annotations.Api;
//import io.swagger.annotations.ApiOperation;

import io.swagger.v3.oas.models.Components;
import io.swagger.v3.oas.models.OpenAPI;
import io.swagger.v3.oas.models.info.Info;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import com.hoavalue.data.User;
import com.hoavalue.data.HoaUserNotFoundException;


@CrossOrigin(origins = {"http://localhost:4200", "http://localhost:8080", "http://hoavalue.com" })
@RestController
@RequestMapping(path="/api/hoauser") // This means URL's start with /demo (after Application path)
@Tag(name = "HOA User", description = "Operations to add, update, get, and delete users from a HOA")

public class HoaUserController {
	@Autowired // This means to get the bean called userRepository// Which is auto-generated by Spring, we will use it to handle the data
	private UserRepository userRepository;

//	//@ApiOperation(value = "Add a new HOA user")
//	@PostMapping(path="/add") // Map ONLY POST Requests
//	public @ResponseBody String addNewUser (@RequestParam String name
//			, @RequestParam String email) {
//		// @ResponseBody means the returned String is the response, not a view name
//		// @RequestParam means it is a parameter from the GET or POST request
//
//		User n = new User();
//		n.setName(name);
//		n.setEmail(email);
//		userRepository.save(n);
//		return "Saved";
//	}

	@GetMapping(path="/all")
	public @ResponseBody Iterable<User> getAllUsers() {
		// This returns a JSON or XML with the users
		return userRepository.findAll();
	}
	
	 // Single item 
	  @GetMapping("/{id}")
	  User one(@PathVariable Long id) {
	    return userRepository.findById(id)
	      .orElseThrow(() -> new HoaUserNotFoundException(id));
	  }
	  
	  @PutMapping("/update/{id}")
	  User updateHoaUser(@RequestBody User newUser, @PathVariable Long id) {

	    return userRepository.findById(id)
	      .map(employee -> {
	        employee.setName(newUser.getName());
	        employee.setEmail(newUser.getEmail());
	        return userRepository.save(employee);
	      })
	      .orElseGet(() -> {
	    	  newUser.setUserId(id);
	        return userRepository.save(newUser);
	      });
	  }

	  @DeleteMapping("/delete/{id}")
	  void deleteHoaUser(@PathVariable Long id) {
		  userRepository.deleteById(id);
	  }
	  
	 

}