package com.hoavalue.service;

import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import com.hoavalue.data.Config;
import com.hoavalue.data.ConfigRepository;

import io.swagger.v3.oas.annotations.tags.Tag;

//import io.swagger.annotations.Api;
//import io.swagger.annotations.ApiOperation;

import io.swagger.v3.oas.models.Components;
import io.swagger.v3.oas.models.OpenAPI;
import io.swagger.v3.oas.models.info.Info;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import com.hoavalue.data.User;
import com.hoavalue.data.HoaUserNotFoundException;

 

@CrossOrigin(origins = {"http://localhost:4200", "http://localhost:8080", "http://hoavalue.com" })
@RestController
@RequestMapping(path="/api/config")  
@Tag(name = "Configuration Name/Value pairs for app", description = "Operations to add, update, get, and delete Configuration (name, value) map")

public class ConfigController {
	@Autowired // This means to get the bean called userRepository// Which is auto-generated by Spring, we will use it to handle the data
	private ConfigRepository configRepository;

	@GetMapping(path="/all")
	public @ResponseBody Iterable<Config> getAllConfig() {
		// This returns a JSON or XML with the users
		return configRepository.findAll();
	}
	
	 // Single item 
	  @GetMapping("/{id}")
	  Optional<Config> one(@PathVariable String id) {
	    return configRepository.findById(id);
	  }
	  
	  @PutMapping("/update/{id}")
	  Config updateConfig(@RequestBody Config newConfig, @PathVariable String id) {

	    return configRepository.findById(id)
	      .map(found -> {
	    	  found.setName(newConfig.getName());
	    	  found.setValue(newConfig.getValue());
	        return configRepository.save(found);
	      })
	      .orElseGet(() -> {
	    	  newConfig.setName(id);
	        return configRepository.save(newConfig);
	      });
	  }

	  @DeleteMapping("/delete/{id}")
	  void deleteHoaUser(@PathVariable String id) {
		  configRepository.deleteById(id);
	  }
	  
	 

}