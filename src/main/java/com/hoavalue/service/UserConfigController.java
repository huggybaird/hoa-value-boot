package com.hoavalue.service;

import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.hoavalue.data.UserConfig;
import com.hoavalue.data.UserConfigId;
import com.hoavalue.data.UserConfigRepository;

import io.swagger.v3.oas.annotations.tags.Tag;

//import io.swagger.annotations.Api;
//import io.swagger.annotations.ApiOperation;



@CrossOrigin(origins = {"http://localhost:4200", "http://localhost:8080", "http://hoavalue.com", "http://my.hoavalue.com", "https://my.hoavalue.com" })

@RestController
@RequestMapping(path="/api/userconfig") // This means URL's start with /demo (after Application path)
@Tag(name = "User Config (userId, name, value) Map", description = "Operations to add, update, get, and deleteUser Config (userId, name, value)")

public class UserConfigController {
	@Autowired // This means to get the bean called userRepository// Which is auto-generated by Spring, we will use it to handle the data
	private UserConfigRepository userConfigRepository;
	
//
////	@GetMapping(path="/all")
////	public @ResponseBody Iterable<UserConfig> getAllConfig() {
////		// This returns a JSON or XML with the users
////		return userConfigRepository.findAll();
////	}
//	
	 // List of all user configs 
	  @GetMapping("/all/{userId}")
	  List<UserConfig> one(@PathVariable int userId) {
		  //return userConfigRepository.findByUserId(userId);
		  //userConfigRepository.find
	    return userConfigRepository.findByUserId(userId);
	  }
//	  
	
	  @PutMapping("/update/{userId}")
	  UserConfig updateConfig(@RequestBody UserConfig newConfig, @PathVariable int userId) {
	
	    return userConfigRepository.findById(new UserConfigId(userId, newConfig.getName()))
	      .map(found -> { 
	    	  found.setValue(newConfig.getValue());
	        return userConfigRepository.save(found);
	      })
	      .orElseGet(() -> {
	    	  //newConfig.setName(id);
	        return userConfigRepository.save(newConfig);
	      });
	  }

//	  @DeleteMapping("/delete/{id}")
//	  void deleteHoaUser(@PathVariable String id) {
//		  configRepository.deleteById(id);
//	  } 
}